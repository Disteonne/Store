info в таблицу history сделай типа jsonb


 let table = "<table>" +
            "<tr><td>" + data.id+"<td></td>"+data.name+
            "</td>" +
            "</tr>"+
            "</table>"

        $("#all_product").html(table)


        var getJSON = function (url, callback) {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, true);
            xhr.responseType = 'json';
            xhr.onload = function () {
                var status = xhr.status;
                if (status === 200) {
                    callback(xhr.response)
                } else {
                    callback(status, xhr.response);
                }
            };
            xhr.send();
        };


        var list = getJSON('http://localhost:8080/product/getAll',
            function (data) {
                console.log(data)


                for (var iter=0;iter<data.length;iter++){
                    var id=data.id;
                    var name=data.name;

                    var elTR = $('all_product').insertRow( -1 );
                    var elTD1 = elTR.insertCell( -1 );
                    elTD1.innerHTML = id;
                    var elTD2 = elTR.insertCell( -1 );
                    elTD2.innerHTML = name;
                }

            });



Не забыть фильтрацию  и запросы
+ не забудь спринг секьюр.


_________________________________________________________
 $(document).ready(function () {
        $.get('/product/getAll', function (data) {
            console.log(data);

            let table = "<table border='1'>";
            for (var iter=0; iter < data.length; iter++) {
                table = table + "<tr><td> " + data[iter].id + "</td><td>" + data[iter].name + "</td>"
                    + "</tr>"
            }
            table = table + "</table>";
            $("#all_product").html(table)
        })
    })

---------------------------------------------------------

+ фильтрация (посмотреть критерии и тд-динами запросы)
+ security
+ добавл таблица ролей

Задание на 23.02.21

- FRONT
- глянь динамич запросы

________________________________________________________

    const newButton = document.getElementById('newButtonProduct');

    function getProductInfo() {
        var inp = "<table>" +
            "<tr>" +
            "<td>" +
            "<input id='input' class='input-in' type=\"text\" style='background-color: #fafafa;" +
            "  border:0;" +
            "  box-shadow:0 0 4px rgba(0,0,0,0.3);" +
            "  transition: .3s box-shadow;" +
            "  width: 600px ; height: 35px '" + "></td>" +
            "<td><button>Input</button></td></tr></table>";
        document.getElementById('inputText').innerHTML = inp;

        var inputIn = document.querySelector('.input-in');
        var button = document.querySelector('button');

        button.onclick = function () {
            var url = inputIn.value;
            console.log(url);


           // var url = document.location.href
            var getProductJson = function (url, callback) {
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, true);
                xhr.responseType = 'json';
                xhr.onload = function () {
                    var status = xhr.status;
                    if (status === 200) {
                        callback(xhr.response)
                    } else {
                        callback(status, xhr.response);
                    }
                };
                xhr.send();
            };

            //'http://localhost:8081/products?page=0&size=6'
            var listProduct = getProductJson(url,
                function (data) {
                    console.log(data)

                    var table = "<table border='2' class='table'>" + "<thead>" +
                        "<tr><th>ID</th><th>Наименование</th><th>Раздел</th><th>Стоимость</th><th>Кол-во</th>" +
                        "<th>ID поставщика</th><th>Описание товара</th><th>Корзина</th></tr></thead>"
                        + "<tbody>";

                    for (var iter = 0; iter < data.length; iter++) {
                        table += "<tr><td>" + data[iter].id + "</td><td>"
                            + data[iter].name + "</td><td>"
                            + data[iter].type + "</td><td>"
                            + data[iter].price + "</td><td>"
                            + data[iter].count + "</td><td>"
                            + data[iter].supplierId + "</td><td>"
                            + data[iter].info + "</td><td>"
                            + "<button  class=\"buttons_plus\" data-id=" + data[iter].id + ">+</button>" //button-primary plus
                            + "<button  class=\"buttons_minus\" data-id=" + data[iter].id + ">-</button></tr>" //button-primary minus
                    }
                    table += "</tbody></table>";

                    document.getElementById('all_product').innerHTML = table;
                });
        }
    }

        newButton.addEventListener('click', getProductInfo);


__________________________________________________________________

ИСПРАВЛЕН. ФАЙЛ JS С КОММЕНТАМИ

//const newButton = document.getElementById('newButtonProduct');

//метод для парсинга JSON

var getProductJson = function (url, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'json';
    xhr.onload = function () {
        var status = xhr.status;
        if (status === 200) {
            callback(xhr.response)
        } else {
            callback(status, xhr.response);
        }
    };
    xhr.send();
};


var functionByUrl= function (url) {
    var listProduct = getProductJson(url,
        function (data) {
            console.log(data)

            var table = "<table border='2' class='table'>" + "<thead>" +
                "<tr><th>ID</th><th>Наименование</th><th>Раздел</th><th>Стоимость</th><th>Кол-во</th>" +
                "<th>ID поставщика</th><th>Описание товара</th><th>Корзина</th></tr></thead>"
                + "<tbody>";

            for (var iter = 0; iter < data.length; iter++) {
                table += "<tr><td>" + data[iter].id + "</td><td>"
                    + data[iter].name + "</td><td>"
                    + data[iter].type + "</td><td>"
                    + data[iter].price + "</td><td>"
                    + data[iter].count + "</td><td>"
                    + data[iter].supplierId + "</td><td>"
                    + data[iter].info + "</td><td>"
                    + "<button  class=\"buttons_plus\" data-id=" + data[iter].id + ">+</button>" //button-primary plus
                    + "<button  class=\"buttons_minus\" data-id=" + data[iter].id + ">-</button></tr>" //button-primary minus
            }
            table += "</tbody></table>";

            document.getElementById('all_product').innerHTML = table;
        });
}

function getProductInfo() {

    //кнопка для поиска

    var inp = "<table>" +
        "<tr>" +
        "<td>" +
        "<input id='input' class='input-in' type=\"text\" style='background-color: #fafafa;" +
        "  border:0;" +
        "  box-shadow:0 0 4px rgba(0,0,0,0.3);" +
        "  transition: .3s box-shadow;" +
        "  width: 600px ; height: 35px '" + "></td>" +
        "<td><button>Input</button></td></tr></table>";

    document.getElementById('inputText').innerHTML = inp;

    var inputIn = document.querySelector('.input-in');
    var button = document.querySelector('button');

        /*
        var functionByUrl= function (url) {
            var listProduct = getProductJson(url,
                function (data) {
                    console.log(data)

                    var table = "<table border='2' class='table'>" + "<thead>" +
                        "<tr><th>ID</th><th>Наименование</th><th>Раздел</th><th>Стоимость</th><th>Кол-во</th>" +
                        "<th>ID поставщика</th><th>Описание товара</th><th>Корзина</th></tr></thead>"
                        + "<tbody>";

                    for (var iter = 0; iter < data.length; iter++) {
                        table += "<tr><td>" + data[iter].id + "</td><td>"
                            + data[iter].name + "</td><td>"
                            + data[iter].type + "</td><td>"
                            + data[iter].price + "</td><td>"
                            + data[iter].count + "</td><td>"
                            + data[iter].supplierId + "</td><td>"
                            + data[iter].info + "</td><td>"
                            + "<button  class=\"buttons_plus\" data-id=" + data[iter].id + ">+</button>" //button-primary plus
                            + "<button  class=\"buttons_minus\" data-id=" + data[iter].id + ">-</button></tr>" //button-primary minus
                    }
                    table += "</tbody></table>";

                    document.getElementById('all_product').innerHTML = table;
                });
        }
         */

        functionByUrl('http://localhost:8081/products?page=0&size=6');
        /*

    var listProduct = getProductJson('http://localhost:8081/products?page=0&size=6',
        function (data) {
            console.log(data)

            var table = "<table border='2' class='table'>" + "<thead>" +
                "<tr><th>ID</th><th>Наименование</th><th>Раздел</th><th>Стоимость</th><th>Кол-во</th>" +
                "<th>ID поставщика</th><th>Описание товара</th><th>Корзина</th></tr></thead>"
                + "<tbody>";

            for (var iter = 0; iter < data.length; iter++) {
                table += "<tr><td>" + data[iter].id + "</td><td>"
                    + data[iter].name + "</td><td>"
                    + data[iter].type + "</td><td>"
                    + data[iter].price + "</td><td>"
                    + data[iter].count + "</td><td>"
                    + data[iter].supplierId + "</td><td>"
                    + data[iter].info + "</td><td>"
                    + "<button  class=\"buttons_plus\" data-id=" + data[iter].id + ">+</button>" //button-primary plus
                    + "<button  class=\"buttons_minus\" data-id=" + data[iter].id + ">-</button></tr>" //button-primary minus
            }
            table += "</tbody></table>";

            document.getElementById('all_product').innerHTML = table;
        });

         */

    button.onclick = function () {
        var searchName = inputIn.value;
        console.log(searchName);
        var urlHost = document.location.host
        var newUrl='http://'+ urlHost +'/products?nameLike='+searchName+'&page=0&size=6'
        functionByUrl(newUrl);




        //'http://localhost:8081/products?page=0&size=6'
        /*
        var listProduct = getProductJson(url,
            function (data) {
                console.log(data)

                var table = "<table border='2' class='table'>" + "<thead>" +
                    "<tr><th>ID</th><th>Наименование</th><th>Раздел</th><th>Стоимость</th><th>Кол-во</th>" +
                    "<th>ID поставщика</th><th>Описание товара</th><th>Корзина</th></tr></thead>"
                    + "<tbody>";

                for (var iter = 0; iter < data.length; iter++) {
                    table += "<tr><td>" + data[iter].id + "</td><td>"
                        + data[iter].name + "</td><td>"
                        + data[iter].type + "</td><td>"
                        + data[iter].price + "</td><td>"
                        + data[iter].count + "</td><td>"
                        + data[iter].supplierId + "</td><td>"
                        + data[iter].info + "</td><td>"
                        + "<button  class=\"buttons_plus\" data-id=" + data[iter].id + ">+</button>" //button-primary plus
                        + "<button  class=\"buttons_minus\" data-id=" + data[iter].id + ">-</button></tr>" //button-primary minus
                }
                table += "</tbody></table>";

                document.getElementById('all_product').innerHTML = table;
            });

         */


    }
}
getProductInfo();



//newButton.addEventListener('click', getProductInfo);


___________________________________________РАБОТАЕТ ПАГИНАЦИЯ ДЛЯ ВСЕХ ПРОДУКТОВ_______________________________
//метод для парсинга JSON
var getInfoAboutProduct = function (url, type, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = type;
    xhr.onload = function () {
        var status = xhr.status;
        if (status === 200) {
            callback(xhr.response)
        } else {
            callback(status, xhr.response);
        }
    };
    xhr.send();
};

var functionByUrl = function (url, type) {

    getInfoAboutProduct(url, type,
        function (data) {
            console.log(data)

            var table = "<table border='2' class='table'>" + "<thead>" +
                "<tr><th>ID</th><th>Наименование</th><th>Раздел</th><th>Стоимость</th><th>Кол-во</th>" +
                "<th>ID поставщика</th><th>Описание товара</th><th>Корзина</th></tr></thead>"
                + "<tbody>";

            for (var iter = 0; iter < data.length; iter++) {
                table += "<tr><td>" + data[iter].id + "</td><td>"
                    + data[iter].name + "</td><td>"
                    + data[iter].type + "</td><td>"
                    + data[iter].price + "</td><td>"
                    + data[iter].count + "</td><td>"
                    + data[iter].supplierId + "</td><td>"
                    + data[iter].info + "</td><td>"
                    + "<button  class=\"buttons_plus\" data-id=" + data[iter].id + ">+</button>" //button-primary plus
                    + "<button  class=\"buttons_minus\" data-id=" + data[iter].id + ">-</button></tr>" //button-primary minus

            }
            table += "</tbody></table>";
            document.getElementById('all_product').innerHTML = table;
        });
    /*
    if (type === 'text') {
        getInfoAboutProduct(url, type, function (data) {
            console.log(data)
            maxPage = Math.round(data / 5);
            console.log(maxPage)
            return maxPage;
        });
     */
}

var page = 0;
var maxPage = 0;
var countPage = 0;
var result = 0;
var resultPage = function getMax(url, type) {
    getInfoAboutProduct(url, type, function (data) {
        result = data; //возвращает кол-во всех объектов/товаров
        maxPage = Math.round(result / 5);
        console.log(maxPage) //все ок, выводит правильное значение
        getProductInfo(countPage);


        pagination(countPage);
        var next = document.getElementById('next');
        var prev = document.getElementById('prev');

        next.onclick = function () {
            if (countPage <= maxPage) {
                countPage++;
                getProductInfo(countPage);
            }
        }
        prev.onclick = function () {
            if (countPage >= 0) {
                countPage--;
                getProductInfo(countPage);
            }
        }

    })
    console.log(result); // выводит 0 (глоб переменную)
    return result;
}


var pagination = function (count) {
    var forButton = '<table>' + '<tr><th>';

    forButton += '<th><button id="prev">Prev</button></th><th>' +
        '<button id="next">Next</button></th>';
    forButton += '</tr>' +
        '</table>';
    document.getElementById('pagination').innerHTML = forButton;
}
//переменная для счетчика
//var count = 0;

function getProductInfo(counter) {

    //селектор для поиска
    var inp = "<table>" +
        "<tr>" +
        "<td>" +
        "<input id='input' class='input-in' type=\"text\" style='background-color: #fafafa;" +
        "  border:0;" +
        "  box-shadow:0 0 4px rgba(0,0,0,0.3);" +
        "  transition: .3s box-shadow;" +
        "  width: 600px ; height: 35px '" + "></td>" +
        "<td><button class='input-selector-one'>Поиск</button></td></tr></table>";

    document.getElementById('inputText').innerHTML = inp;

    var inputIn = document.querySelector('.input-in');
    var button = document.querySelector('button');
    var urlHost = document.location.host
    if (counter == null) {
        counter = 0;
    }
    functionByUrl('http://' + urlHost + '/products?page=' + counter + '&size=5', 'json');


    //var k = resultPage('http://' + urlHost + '/count', 'text');
    //console.log(k)
    //console.log(maxPage);

    button.onclick = function () {
        counter=0;
        var searchName = inputIn.value;
        console.log(searchName);
        var newUrl = 'http://' + urlHost + '/products?nameLike=' + searchName + '&page=' + counter;//&size=6
        functionByUrl(newUrl, 'json');
    }

}

var urlHost = document.location.host
resultPage('http://' + urlHost + '/count', 'text');
//getProductInfo();
_____________________________________________-РАБОТАЕТ ВСЕ---------------------------------------

//метод для парсинга JSON
var getInfoAboutProduct = function (url, type, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = type;
    xhr.onload = function () {
        var status = xhr.status;
        if (status === 200) {
            callback(xhr.response)
        } else {
            callback(status, xhr.response);
        }
    };
    xhr.send();
};

var functionByUrl = function (url, type) {
    getInfoAboutProduct(url, type,
        function (data) {
            console.log(data)
            var table = "<table border='2' class='table'>" + "<thead>" +
                "<tr><th>ID</th><th>Наименование</th><th>Раздел</th><th>Стоимость</th><th>Кол-во</th>" +
                "<th>ID поставщика</th><th>Описание товара</th><th>Корзина</th></tr></thead>"
                + "<tbody>";

            for (var iter = 0; iter < data.length; iter++) {
                table += "<tr><td>" + data[iter].id + "</td><td>"
                    + data[iter].name + "</td><td>"
                    + data[iter].type + "</td><td>"
                    + data[iter].price + "</td><td>"
                    + data[iter].count + "</td><td>"
                    + data[iter].supplierId + "</td><td>"
                    + data[iter].info + "</td><td>"
                    + "<button  class=\"buttons_plus\" data-id=" + data[iter].id + ">+</button>" //button-primary plus
                    + "<button  class=\"buttons_minus\" data-id=" + data[iter].id + ">-</button></tr>" //button-primary minus
            }
            table += "</tbody></table>";
            document.getElementById('all_product').innerHTML = table;
        });
}

var page = 0;
var maxPage = 0;
var countPage = 0;
var result = 0;

function getMax(url, type,urlForProduct) {
    getInfoAboutProduct(url, type, function (data) {
        result = data; //возвращает кол-во всех объектов/товаров
        maxPage = Math.round(result / 5);
        console.log(maxPage) //все ок, выводит правильное значение
        getProductInfo(countPage,urlForProduct+countPage);
        pagination(countPage);
        var next = document.getElementById('next');
        var prev = document.getElementById('prev');

        var kek1=urlForProduct+countPage;
        console.log(kek1)
        var kek2= getProductInfo(countPage,urlForProduct+countPage);
        console.log(kek2)
        next.onclick = function () {
            if (countPage <= maxPage) {
                countPage++;
                getProductInfo(countPage,urlForProduct+countPage);
            }
        }
        prev.onclick = function () {
            if (countPage >= 0) {
                countPage--;
                getProductInfo(countPage,urlForProduct+countPage);
            }
        }

    })
    console.log(result); // выводит 0 (глоб переменную)
    return result;
}


var pagination = function nextPrev() {
    var forButton = '<table>' + '<tr><th>';

    forButton += '<th><button id="prev">Prev</button></th><th>' +
        '<button id="next">Next</button></th>';
    forButton += '</tr>' +
        '</table>';
    document.getElementById('pagination').innerHTML = forButton;
}
//переменная для счетчика
//var count = 0;

function getProductInfo(counter,urlForProduct) {

    //selector(counter);
    functionByUrl(urlForProduct,'json');
   // functionByUrl('http://' + urlHost + '/products?page=' + counter + '&size=5', 'json');
}

var inp = "<table>" +
    "<tr>" +
    "<td>" +
    "<input id='input' class='input-in' type=\"text\" style='background-color: #fafafa;" +
    "  border:0;" +
    "  box-shadow:0 0 4px rgba(0,0,0,0.3);" +
    "  transition: .3s box-shadow;" +
    "  width: 600px ; height: 35px '" + "></td>" +
    "<td><button class='input-selector-one'>Поиск</button></td></tr></table>";

document.getElementById('inputText').innerHTML = inp;
var inputIn = document.querySelector('.input-in');
var button = document.querySelector('button');


//function selector(counter) {
    //селектор для поиска
    /*
    var inp = "<table>" +
        "<tr>" +
        "<td>" +
        "<input id='input' class='input-in' type=\"text\" style='background-color: #fafafa;" +
        "  border:0;" +
        "  box-shadow:0 0 4px rgba(0,0,0,0.3);" +
        "  transition: .3s box-shadow;" +
        "  width: 600px ; height: 35px '" + "></td>" +
        "<td><button class='input-selector-one'>Поиск</button></td></tr></table>";

    document.getElementById('inputText').innerHTML = inp;
    var inputIn = document.querySelector('.input-in');
    var button = document.querySelector('button');

     */
    var urlHost = document.location.host

    button.onclick = function() {
        countPage=0;
        var searchName = inputIn.value;
        console.log(searchName);
        var newUrl = 'http://' + urlHost + '/products?nameLike=' + searchName + '&page=';//&size=6
        getMax('http://' + urlHost + '/count?name=' + searchName,'json', newUrl);
        //functionByUrl(newUrl, 'json',);
    }

//}

var urlHost = document.location.host
var kek=inputIn.value
console.log(kek==="")
var s='sk';
if (inputIn.value === "") {
    getMax('http://' + urlHost + '/count', 'text','http://' + urlHost + '/products?page=');
} else {
    countPage=0;
    getMax('http://' + urlHost + '/count?name=' + inputIn.value);
}
//getProductInfo();

---------------------------------
27.02.21
-убрать лишний код из product.js
-еще раз протестить

_________________________________рабочий код product.js с комментами____________________________
//метод для парсинга JSON
var getInfoAboutProduct = function (url, type, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = type;
    xhr.onload = function () {
        var status = xhr.status;
        if (status === 200) {
            callback(xhr.response)
        } else {
            callback(status, xhr.response);
        }
    };
    xhr.send();
};

var functionByUrl = function (url, type) {
    getInfoAboutProduct(url, type,
        function (data) {
            console.log(data)
            var table = "<table border='2' class='table'>" + "<thead>" +
                "<tr><th>ID</th><th>Наименование</th><th>Раздел</th><th>Стоимость</th><th>Кол-во</th>" +
                "<th>ID поставщика</th><th>Описание товара</th><th>Корзина</th></tr></thead>"
                + "<tbody>";

            for (var iter = 0; iter < data.length; iter++) {
                table += "<tr><td>" + data[iter].id + "</td><td>"
                    + data[iter].name + "</td><td>"
                    + data[iter].type + "</td><td>"
                    + data[iter].price + "</td><td>"
                    + data[iter].count + "</td><td>"
                    + data[iter].supplierId + "</td><td>"
                    + data[iter].info + "</td><td>"
                    + "<button  class=\"buttons_plus\" data-id=" + data[iter].id + ">+</button>" //button-primary plus
                    + "<button  class=\"buttons_minus\" data-id=" + data[iter].id + ">-</button></tr>" //button-primary minus
            }
            table += "</tbody></table>";
            document.getElementById('all_product').innerHTML = table;
        });
}

var page = 0;
var maxPage = 0;
var countPage = 0;
var result = 0;

function getMax(url, type, urlForProduct) {
    getInfoAboutProduct(url, type, function (data) {
        maxPage = Math.round(data / 5);
        //console.log(maxPage) //все ок, выводит правильное значение
        functionByUrl(urlForProduct + countPage, 'json')
        pagination(countPage,maxPage);
        var next;
        var prev;
        if((countPage+1)!==maxPage) {
            next = document.getElementById('next');
            next.onclick = function () {
                if (countPage <= maxPage) {
                    countPage++;
                    getMax(url,type,urlForProduct);
                    console.log(kek)
                    functionByUrl( urlForProduct + countPage,'json');
                }else {
                    pagination(countPage,maxPage);
                }
            }
        }
        if(countPage !==0) {
            prev = document.getElementById('prev');
            prev.onclick = function () {
                if (countPage >= 0) {
                    countPage--;
                    getMax(url,type,urlForProduct);
                    functionByUrl(urlForProduct + countPage,'json');
                }
            }
        }

        //var kek1=urlForProduct+countPage;
        //console.log(kek1)
        //var kek2= getProductInfo(countPage,urlForProduct+countPage);
        //console.log(kek2)
        /*
        next.onclick = function () {
            if (countPage <= maxPage) {
                countPage++;
                var kek=urlForProduct + countPage;
                getMax(url,type,urlForProduct);
                //pagination(countPage,maxPage);
                console.log(kek)
                functionByUrl( urlForProduct + countPage,'json');
            }else {
                pagination(countPage,maxPage);
            }
        }

         */
        /*
        prev.onclick = function () {
            if (countPage >= 0) {
                countPage--;
                getMax(url,type,urlForProduct);
                //pagination(countPage,maxPage);
                functionByUrl(urlForProduct + countPage,'json');
            }
        }

         */

    })
    console.log(result); // выводит 0 (глоб переменную)
    return result;
}


var pagination = function nextPrev(counter, maxPage) {
    var forButton = '<table>' + '<tr><th>';
    if (counter === 0) {
        forButton += '<button id="next">Next</button></th>';
    } else if (counter +1 === maxPage) {
        forButton += '<th><button id="prev">Prev</button></th><th>';
    } else {
        forButton += '<th><button id="prev">Prev</button></th><th>' +
            '<button id="next">Next</button></th>';
    }
    forButton += '</tr>' +
        '</table>';
    document.getElementById('pagination').innerHTML = forButton;
}


var inp = "<table>" +
    "<tr>" +
    "<td>" +
    "<input id='input' class='input-in' type=\"text\" style='background-color: #fafafa;" +
    "  border:0;" +
    "  box-shadow:0 0 4px rgba(0,0,0,0.3);" +
    "  transition: .3s box-shadow;" +
    "  width: 600px ; height: 35px '" + "></td>" +
    "<td><button class='input-selector-one'>Поиск</button></td></tr></table>";

document.getElementById('inputText').innerHTML = inp;
var inputIn = document.querySelector('.input-in');
var button = document.querySelector('button');


//function selector(counter) {
//селектор для поиска
/*
var inp = "<table>" +
    "<tr>" +
    "<td>" +
    "<input id='input' class='input-in' type=\"text\" style='background-color: #fafafa;" +
    "  border:0;" +
    "  box-shadow:0 0 4px rgba(0,0,0,0.3);" +
    "  transition: .3s box-shadow;" +
    "  width: 600px ; height: 35px '" + "></td>" +
    "<td><button class='input-selector-one'>Поиск</button></td></tr></table>";

document.getElementById('inputText').innerHTML = inp;
var inputIn = document.querySelector('.input-in');
var button = document.querySelector('button');

 */
var urlHost = document.location.host

button.onclick = function () {
    countPage = 0;
    var searchName = inputIn.value;
    console.log(searchName);
    var newUrl = 'http://' + urlHost + '/products?nameLike=' + searchName + '&page=';//&size=6
    getMax('http://' + urlHost + '/count?name=' + searchName, 'json', newUrl);
    //functionByUrl(newUrl, 'json',);
}

//}

var urlHost = document.location.host
var kek = inputIn.value
console.log(kek === "")
var s = 'sk';
if (inputIn.value === "") {
    getMax('http://' + urlHost + '/count', 'text', 'http://' + urlHost + '/products?page=');
} else {
    countPage = 0;
    getMax('http://' + urlHost + '/count?name=' + inputIn.value);
}
//getProductInfo();

-----------------------------------------------------------------------------------
//метод для парсинга JSON
var getInfoAboutProduct = function (url, type, callback) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = type;
    xhr.onload = function () {
        var status = xhr.status;
        if (status === 200) {
            callback(xhr.response)
        } else {
            callback(status, xhr.response);
        }
    };
    xhr.send();
};

var inp = "<table>" +
    "<tr>" +
    "<td>" +
    "<input id='input' class='input-in' type=\"text\" style='background-color: #fafafa;" +
    "  border:0;" +
    "  box-shadow:0 0 4px rgba(0,0,0,0.3);" +
    "  transition: .3s box-shadow;" +
    "  width: 600px ; height: 35px '" + "></td>" +
    "<td><button class='input-selector-one'>Поиск</button></td></tr></table>";

document.getElementById('inputText').innerHTML = inp;
var inputIn = document.querySelector('.input-in');
var button = document.querySelector('button');

var urlHost = document.location.host

button.onclick = function () {
    countPage = 0;
    var searchName = inputIn.value;
    console.log(searchName);
    var newUrl = 'http://' + urlHost + '/products?nameLike=' + searchName + '&page=';//&size=6
    getMax('http://' + urlHost + '/count?name=' + searchName, 'json', newUrl);
    //functionByUrl(newUrl, 'json',);
}

var urlHost = document.location.host
var kek = inputIn.value
console.log(kek === "")
var s = 'sk';
if (inputIn.value === "") {
    getMax('http://' + urlHost + '/count', 'text', 'http://' + urlHost + '/products?page=');
} else {
    countPage = 0;
    getMax('http://' + urlHost + '/count?name=' + inputIn.value);
}


var functionByUrl = function (url, type) {
    getInfoAboutProduct(url, type,
        function (data) {
            console.log(data)
            var table = "<table border='2' class='table'>" + "<thead>" +
                "<tr><th>ID</th><th>Наименование</th><th>Раздел</th><th>Стоимость</th><th>Кол-во</th>" +
                "<th>ID поставщика</th><th>Описание товара</th><th>Корзина</th></tr></thead>"
                + "<tbody>";

            for (var iter = 0; iter < data.length; iter++) {
                table += "<tr><td>" + data[iter].id + "</td><td>"
                    + data[iter].name + "</td><td>"
                    + data[iter].type + "</td><td>"
                    + data[iter].price + "</td><td>"
                    + data[iter].count + "</td><td>"
                    + data[iter].supplierId + "</td><td>"
                    + data[iter].info + "</td><td>"
                    + "<button  class=\"buttons_plus\" data-id=" + data[iter].id + ">+</button>" //button-primary plus
                    + "<button  class=\"buttons_minus\" data-id=" + data[iter].id + ">-</button></tr>" //button-primary minus
            }
            table += "</tbody></table>";
            document.getElementById('all_product').innerHTML = table;
        });
}

var page = 0;
var maxPage = 0;
var countPage = 0;
var result = 0;

function getMax(url, type, urlForProduct) {
    getInfoAboutProduct(url, type, function (data) {
        maxPage = Math.round(data / 5);
        //console.log(maxPage) //все ок, выводит правильное значение
        functionByUrl(urlForProduct + countPage, 'json')
        pagination(countPage, maxPage);
        var next;
        var prev;
        if ((countPage + 1) !== maxPage) {
            next = document.getElementById('next');
            next.onclick = function () {
                if (countPage <= maxPage) {
                    countPage++;
                    getMax(url, type, urlForProduct);
                    console.log(kek)
                    functionByUrl(urlForProduct + countPage, 'json');
                } else {
                    pagination(countPage, maxPage);
                }
            }
        }
        if (countPage !== 0) {
            prev = document.getElementById('prev');
            prev.onclick = function () {
                if (countPage >= 0) {
                    countPage--;
                    getMax(url, type, urlForProduct);
                    functionByUrl(urlForProduct + countPage, 'json');
                }
            }
        }
    })
}

var pagination = function nextPrev(counter, maxPage) {
    var forButton = '<table>' + '<tr><th>';
    if (counter === 0) {
        forButton += '<button id="next">Next</button></th>';
    } else if (counter + 1 === maxPage) {
        forButton += '<th><button id="prev">Prev</button></th><th>';
    } else {
        forButton += '<th><button id="prev">Prev</button></th><th>' +
            '<button id="next">Next</button></th>';
    }
    forButton += '</tr>' +
        '</table>';
    document.getElementById('pagination').innerHTML = forButton;
}
//КОРЗИНА
var countBasket = 0;
document.onclick = function (event) {
    if (countBasket <= 10) {
        if (event.target.classList.contains('buttons_plus')) {
            plusFunction(event.target.dataset.id);
        }
        if (event.target.classList.contains('buttons_minus')) {
            minusFunction(event.target.dataset.id);
        }
    } else {
        console.log('basket is full')
    }
}
var mapBasket = new Map();

function plusFunction(id) {
    var flag = false;
    if (mapBasket.size === 0) {
        mapBasket.set(id, 1);
    } else {
        for (var [key, value] of mapBasket) {
            if (key === id) {
                var kek = value;
                mapBasket.set(id, ++kek);
                flag = true;
                break;
            }
        }
        if (flag === false) {
            mapBasket.set(id, 1);
        }
    }
    for (var [keys, values] of mapBasket) {
        console.log(keys + " " + values);
    }
    //var newHtmlBasket=window.open("http://localhost:8081/basket.html");
    //newHtmlBasket.getMapFromProduct(mapBasket);


    //var obj=map_to_object(mapBasket);
    //var str=JSON.stringify(obj);
    // localStorage.setItem("map",str);
    //console.log(window.localStorage.getItem("map"));
    //console.log(JSON.stringify(obj));
    basket(mapBasket);
}

function minusFunction(id) {
    var flag = false;
    if (mapBasket.size === 0) {
        console.log("basket is empty");
    } else {
        for (var [key, value] of mapBasket) {
            if (key === id) {
                var kek = value;
                if (--kek === 0) {
                    mapBasket.delete(key)
                } else {
                    mapBasket.set(id, kek);
                }
                flag = true;
                break;
            }
        }
        if (flag === false) {
            console.log("product not found")
        }
    }
    console.log(mapBasket.size);
    for (var [keys, values] of mapBasket) {
        console.log(keys + " " + values);
    }
    console.log(mapBasket);
    basket(mapBasket);

    var obj = map_to_object(mapBasket);
    console.log(JSON.stringify(obj));
}

//var mappa = new Map();
var getProductById =  function productById(tableBasket,map) {
    var promise =  getInfoAboutProduct('http://' + urlHost + '/all/products', 'json', function (data) {
        var mappa=new Map();
        for (let i = 0; i < data.length; i++) {
            var name=data[i].name;
            var id=data[i].id;
            console.log(name);
            console.log(id);
            mappa.set(id,name);
        }
        for (var [keys,value] of mappa){
            console.log(keys+" "+value);
        }
        console.log(mappa.get(4));
        for (var [key, values] of map) {
            console.log(mappa.get(parseInt(key)));
            tableBasket += "<tr><td>" + mappa.get(parseInt(key)) + "</td>"
                + "<td>" + values + "</td>";
        }
        tableBasket += "</tr></tbody></table>";
        document.getElementById('basket').innerHTML = tableBasket;
            //}

        /*
        var name = data.name;
        tableBasket += "<br><table border='2' class='table'><thead>" +
            "<tr><th>Name</th><th>Count</th></tr></thead><tbody>";
        for (var [key, value] of mapBasket) {
            productById(key)
        }


        tableBasket += "<tr><td>" + name + "</td>"
            + "<td>" + map.get(keyId) + "</td>";

         */

    });

};
//var res = await getProductById;
//console.log(mappa.get(2));

function basket(map) {
    var tableBasket = "<h1 align=\"center\">Basket</h1>";

    if (map.size === 0) {
        tableBasket += "<h2>Basket is empty</h2>";
        document.getElementById('basket').innerHTML = tableBasket;
    } else {
        tableBasket += "<br><table border='2' class='table'><thead>" +
            "<tr><th>Name</th><th>Count</th></tr></thead><tbody>";
        getProductById(tableBasket,map);
        /*
        var getProductById = function productById(id) {
            let promise = getInfoAboutProduct('http://' + urlHost + '/product/' + id, 'json', function (data) {

                mappa.set(data.id, data.name);
                var name = data.name;
                //tableBasket += "<br><table border='2' class='table'><thead>" +
                //    "<tr><th>Name</th><th>Count</th></tr></thead><tbody>";
                //for (var [key, values] of map) {
                tableBasket += "<tr><td>" + name + "</td>"
                    + "<td>" + map.get(key) + "</td>";

                //}
            });

        }
        for (var [key, value] of map) {
            getProductById(key);
        }

        tableBasket += "</tr></tbody></table>";
        document.getElementById('basket').innerHTML = tableBasket;

         */
    }
   // document.getElementById('basket').innerHTML = tableBasket;
}


function map_to_object(map) {
    const out = Object.create(null)
    map.forEach((value, key) => {
        if (value instanceof Map) {
            out[key] = map_to_object(value)
        } else {
            out[key] = value
        }
    })
    return out
}
__________________________________________________использ промисов__________________________________
function httpGet(url) {

    return new Promise(function(resolve, reject) {

        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);

        xhr.onload = function() {
            if (this.status == 200) {
                resolve(this.response);
            } else {
                var error = new Error(this.statusText);
                error.code = this.status;
                reject(error);
            }
        };

        xhr.onerror = function() {
            reject(new Error("Network Error"));
        };

        xhr.send();
    });

}

var str;
var kekch;
async function kek() {

    str = await httpGet("http://localhost:8081/product/2").then(response => {
            console.log(response);
            let info = JSON.parse(response);
            str = info;
            return info
        }
        , error => console.log(error));

    console.log("opopop");

    console.log(str);
    return str;
}
/*
async function f() {
    kekch = await kek();
    console.log(kekch);
}
f();

 */

var inf= kek().then(r => "kek");
var wtd=Promise.resolve();
console.log(wtd);

_____________________________
удаление поставщика->удаляем продукт


  // Address address=supplier.getAddress();
        if(!warehouse.getCountry().equals(""))
            address.setCountry(warehouse.getCountry());
        if(!warehouse.getCity().equals(""))
            address.setCity(warehouse.getCity());
        if(!warehouse.getStreet().equals(""))
            address.setStreet(warehouse.getStreet());
        if(!warehouse.getBuilding().equals(""))
            address.setBuilding(warehouse.getBuilding());



Принцип работы склада:
Добавление товара->                       а)новый           |              б)изменение текущего
                       1.Создаем новые продукт.Заносим дан- |А)Изменение поставщика
                        ные.                                |1.Находим продукт по имени.Если нет,то new Product()
                       2.Поставщик: Заносятся все данные.   |2.Поставщик: берем поставщика у продукта и изменяем данные.
                       Если что не занесено-эксепшн.(?)     |3.Адрес:
                       3.Адрес: заносятся все данные.Если   |   а) Если все поля с адресом пустые,то возвращаем текущий адрес
                       что не занесено-эксепшн(?).В хорошем |поставщика.(с помощью count)
                       исходе-ищем,есть ли такой адрес в бд,|   б) Если некоторые поля непустые,то создаем НОВЫЙ адрес и заносим
                       если да-заносим поставщику и провер. |часть введенных данных и часть тех данных,которые не были изменены.
                       есть ли данный поставщик в бд.Заносим|(у одного поставщика мб несколько адресов-все легально.ахах)
                       поставщика в продукт и сохраняем.    |   Заносим адрес поставщику и сохраняем его с тем же id.(Меняется у всех
                                                            | товаров.
                       Доделай тз.                          |Б)Новый поставщик
                                                            |1.Находим продукт по имени.Если нет,то new Product()
                                                            |2.Поставщик: создаем нового поставщика,поля которого должны быть
                                                            |полностью заполнены,в противном случае-эксепшн.
                                                            |3.Аналогично п.3 под А)


    public WarehousePostDto saveWarehouse(WarehousePostDto warehousePostDto) {
        try {
            //part with address
            Address address = warehouseMapper.toAddress(warehousePostDto);
            if (existsAddress(address) == null) {
                addressService.save(address);//сохраняем новый
            } else {
                address = existsAddress(address);//присваиваем адрес.где есть id и тд
            }

            //part with supplier
            Supplier supplier = warehouseMapper.toSupplier(warehousePostDto, addressMapper.toAddressDto(address));
            if (existsSupplier(supplier) == null) {
                supplierService.save(supplier);//сохраняем нового
            } else {
                supplier = existsSupplier(supplier);//присваиваем поставщика.который уже имеется в бд
            }

            //part with product
            Product product = warehouseMapper.toProduct(warehousePostDto, supplierMapper.toSupplierDto(supplier));
            if (existsProduct(product) == null) {
                productService.save(product);
            } else {
                product = existsProduct(product);
            }

        } catch (InputException | TypeNotFoundException exception) {
            exception.printStackTrace();
            return null;
        }
        return warehousePostDto;
    }
________________________________________-WAREHOUSEMAPPER-________________________________________
                                        С изменениями и без

package com.netcracker.store.mapper;

import com.netcracker.store.dto.*;
import com.netcracker.store.entity.Address;
import com.netcracker.store.entity.Product;
import com.netcracker.store.entity.Supplier;
import com.netcracker.store.exception.*;
import com.netcracker.store.service.AddressService;
import com.netcracker.store.service.ProductService;
import com.netcracker.store.service.SupplierService;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Component;

@AllArgsConstructor
@Component
public class WarehouseMapper {

    private final ProductMapper productMapper;
    private final AddressMapper addressMapper;
    private final SupplierMapper supplierMapper;

    private ProductService productService;
    private SupplierService supplierService;
    private AddressService addressService;

    //тз на 07.03.21
    //напиши проверку на ввод + учти наличие поставщика и адреса в бд
    //оптимизиуй код
    public Address toAddress(WarehousePatchDto warehouse) throws InputException, AddressException {
        //AddressPostDto addressPostDto = new AddressPostDto();
        if (warehouse != null) {
            return saveAddress(warehouse);
            //addressPostDto.setCountry(warehouse.getCountry());
            //addressPostDto.setCity(warehouse.getCity());
            //addressPostDto.setStreet(warehouse.getStreet());
            //addressPostDto.setBuilding(warehouse.getBuilding());
        } else {
            throw new InputException("Input exception: WarehouseMapper-> toAddress");
        }
        //return addressMapper.toAddress(addressPostDto);
    }
    public Supplier toSupplier(WarehousePatchDto warehouse) throws InputException, SupplierException, AddressException {
        if(warehouse!=null){
            return  newSupplier(warehouse);
        }else {
            throw new InputException("Input exception: WarehouseMapper-> toSupplier");
        }
    }
    /*
    public Supplier toSupplier(WarehousePostDto warehouse, AddressDto addressDto) throws InputException {
        SupplierPostDto supplierPostDto = new SupplierPostDto();
        if (warehouse != null && addressDto != null) {
            supplierPostDto.setName(warehouse.getSupplierName());
            supplierPostDto.setMail(warehouse.getMail());
            supplierPostDto.setAddressId(addressDto.getId());
        } else {
            throw new InputException("Input exception: WarehouseMapper-> toSupplier");
        }
        return supplierMapper.toSupplier(supplierPostDto);
    }

     */
    public Product toProduct(WarehousePatchDto warehouse) throws InputException, ProductException, SupplierException, AddressException {
        if(warehouse!=null){
            Product product=new Product();
            if(productService.getByName(warehouse.getProductOldName())!=null){
                throw new InputException("Product in db already");
            }else {
                if(warehouse.getProductOldName().equals("")){
                    throw new ProductException("Product name IS NULL");
                }else {
                    product.setName(warehouse.getProductOldName());
                }

                if(warehouse.getType().equals("")){
                    throw new ProductException("Product type IS NULL");
                }else {
                    product.setType(warehouse.getType());
                }

                if(warehouse.getCount()==0){
                    throw new ProductException("Product count IS NULL");
                }else {
                    product.setCount(warehouse.getCount());
                }

                if(warehouse.getPrice()==null){
                    throw new ProductException("Product price IS NULL");
                }else {
                    product.setPrice(warehouse.getPrice());
                }

                if(warehouse.getInfo().equals("")){
                    throw new ProductException("Product info IS NULL");
                }else {
                    product.setInfo(warehouse.getInfo());
                }
                product.setSupplier(newSupplier(warehouse));
            }
            //проверяем все ли поля заполнены
            //ищем такой в базе-если есть-эксепшн.ибо мы создаем НОВЫЙ
            //если нет.то заполняем поля
            return product;
        }else {
            return new Product();
        }
    }
    /*
    public Product toProduct(WarehousePostDto warehouse, SupplierDto supplierDto) throws TypeNotFoundException, InputException {
        ProductPostDto productPostDto = new ProductPostDto();
        if (warehouse != null && supplierDto != null) {
            productPostDto.setName(warehouse.getProductName());
            productPostDto.setPrice(warehouse.getPrice());
            productPostDto.setCount(warehouse.getCount());
            productPostDto.setType(warehouse.getType());
            productPostDto.setInfo(warehouse.getInfo());
            productPostDto.setSupplierId(supplierDto.getId());
        } else {
            throw new InputException("Input exception: WarehouseMapper-> toProduct");
        }
        return productMapper.toProduct(productPostDto);
    }

     */

    public Product toProductNewSupplier(WarehousePatchDto warehouse) throws SupplierException, AddressException, InputException {
        Product product = productService.getByName(warehouse.getProductOldName());
        if (product != null) {
            if (!warehouse.getProductNewName().equals(""))
                product.setName(warehouse.getProductNewName());
            if (warehouse.getCount() != 0)
                product.setCount(warehouse.getCount());
            if (warehouse.getPrice() != null)
                product.setPrice(warehouse.getPrice());
            if (!warehouse.getType().equals(""))
                product.setType(warehouse.getType());
            if (!warehouse.getInfo().equals(""))
                product.setInfo(warehouse.getInfo());

            product.setSupplier(newSupplier(warehouse));
            return productService.save(product);
        }
        return new Product();
    }

    public Product toProductEditSupplier(WarehousePatchDto warehouse) {
        Product product = productService.getByName(warehouse.getProductOldName());
        if (product != null) {
            if (!warehouse.getProductNewName().equals(""))
                product.setName(warehouse.getProductNewName());
            if (warehouse.getCount() != 0)
                product.setCount(warehouse.getCount());
            if (warehouse.getPrice() != null)
                product.setPrice(warehouse.getPrice());
            if (!warehouse.getType().equals(""))
                product.setType(warehouse.getType());
            if (!warehouse.getInfo().equals(""))
                product.setInfo(warehouse.getInfo());

            Supplier supplier = product.getSupplier();
            if (!warehouse.getSupplierName().equals(""))
                supplier.setName(warehouse.getSupplierName());
            if (!warehouse.getMail().equals(""))
                supplier.setMail(warehouse.getMail());

            Address address = addressService.find(warehouse.getCountry(), warehouse.getCity(), warehouse.getStreet(), warehouse.getBuilding());
            if (address == null) {
                address = new Address();
                byte count = 0;
                if (!warehouse.getCountry().equals(""))
                    address.setCountry(warehouse.getCountry());
                else {
                    count++;
                    address.setCountry(supplier.getAddress().getCountry());
                }
                if (!warehouse.getCity().equals(""))
                    address.setCity(warehouse.getCity());
                else {
                    count++;
                    address.setCity(supplier.getAddress().getCity());
                }
                if (!warehouse.getStreet().equals(""))
                    address.setStreet(warehouse.getStreet());
                else {
                    count++;
                    address.setStreet(supplier.getAddress().getStreet());
                }
                if (!warehouse.getBuilding().equals(""))
                    address.setBuilding(warehouse.getBuilding());
                else {
                    count++;
                    address.setBuilding(supplier.getAddress().getBuilding());
                }
                if (count == 4)
                    address.setId(supplier.getAddress().getId());
                addressService.save(address);
            }
            supplier.setAddress(address);
            supplierService.save(supplier);
            product.setSupplier(supplier);
            return productService.save(product);
        }

        return new Product();
    }

    private Supplier newSupplier(WarehousePatchDto warehouse) throws SupplierException, AddressException, InputException {
        Supplier supplier = new Supplier();
        if (warehouse.getSupplierName().equals("")) {
            throw new SupplierException("Supplier name IS NULL");
        } else {
            supplier.setName(warehouse.getSupplierName());
        }
        if (warehouse.getMail().equals("")) {
            throw new SupplierException("Supplier mail IS NULL");
        } else {
            supplier.setMail(warehouse.getMail());
        }
        supplier.setAddress(toAddress(warehouse));
        //supplier.setAddress(saveAddress(warehouse));
        Supplier search = supplierService.getByAll(supplier.getName(), supplier.getMail(), supplier.getAddress());
        if (search == null) {
            supplierService.save(supplier);
        } else {
            supplier = search;
        }
        return supplier;
    }

    private Address saveAddress(WarehousePatchDto warehouse) throws AddressException {
        Address address = addressService.find(warehouse.getCountry(), warehouse.getCity(), warehouse.getStreet(), warehouse.getBuilding());
        if (address == null) {
            address = new Address();
            if (warehouse.getCountry().equals("")) {
                throw new AddressException("Address country IS NULL");
            } else {
                address.setCountry(warehouse.getCountry());
            }
            if (warehouse.getCity().equals("")) {
                throw new AddressException("Address city IS NULL");
            } else {
                address.setCity(warehouse.getCity());
            }
            if (warehouse.getStreet().equals("")) {
                throw new AddressException("Address street IS NULL");
            } else {
                address.setStreet(warehouse.getStreet());
            }
            address.setBuilding(warehouse.getBuilding());
            addressService.save(address);
        }
        return address;
    }
}
___________________________________-warehouseservice-__________________________
package com.netcracker.store.service;

import com.netcracker.store.dto.WarehousePatchDto;
import com.netcracker.store.dto.WarehousePostDto;
import com.netcracker.store.entity.Address;
import com.netcracker.store.entity.Product;
import com.netcracker.store.entity.Supplier;
import com.netcracker.store.exception.*;
import com.netcracker.store.mapper.AddressMapper;
import com.netcracker.store.mapper.SupplierMapper;
import com.netcracker.store.mapper.WarehouseMapper;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

@Service
@Component
@RequiredArgsConstructor
public class WarehouseService {

    private final WarehouseMapper warehouseMapper;
    private final AddressMapper addressMapper;
    private final SupplierMapper supplierMapper;

    private final AddressService addressService;
    private final SupplierService supplierService;
    private final ProductService productService;

    public Product saveWarehouse(WarehousePatchDto warehousePostDto) {
        try {

            //Address address = warehouseMapper.toAddress(warehousePostDto);
            //Supplier supplier = warehouseMapper.toSupplier(warehousePostDto);
            //part with product
            Product product = warehouseMapper.toProduct(warehousePostDto);
            return product;
        } catch (InputException | AddressException | ProductException |SupplierException exception ) {
            exception.printStackTrace();
            return null;
        }
    }

    private Address existsAddress(Address newAddress) {
        return addressService.find(newAddress.getCountry(), newAddress.getCity(), newAddress.getStreet(), newAddress.getBuilding());
    }

    private Supplier existsSupplier(Supplier supplier) {
        return supplierService.getByAll(supplier.getName(), supplier.getMail(), supplier.getAddress());
    }

    private Product existsProduct(Product product) {
        return productService.getByName(product.getName());
    }

    public Product editNewSupplier(WarehousePatchDto warehouse) throws SupplierException, AddressException, InputException {
        return warehouseMapper.toProductNewSupplier(warehouse);
    }

    public Product editEditSupplier(WarehousePatchDto warehouse){
        return warehouseMapper.toProductEditSupplier(warehouse);
    }
}

____________________________________________________CSS______________________


.basket_b {
    background-image: url("../img/button.jpg");
    display: block;
    box-sizing: border-box;
    align-content: center;
    bottom: 10px;
    margin: 1% 0;

    width: 100px;
    max-width: 70px;
    height: 70px;
    border: 1px solid #000;
    justify-content: center;
    align-items: center;
    text-transform: uppercase;
    padding: 25px 12px;

    border-radius: 8px;
    color: black;
    text-align: center;
    text-decoration: none;
    letter-spacing: 1px;
    transition: all 0.3s ease-out;
}




.pagination_logout {
    position: relative;
    display: block;
    text-decoration: none;
    text-align: center;
    font-family: verdana;
    font-size: 11px;
    letter-spacing: 2px;
    border-bottom: 1px ;

    background-image: url("../img/button.jpg");
    box-sizing: border-box;
    align-content: center;
    bottom: 10px;
    margin: 1% 0;

    width: 110px;
    max-width: 110px;
    height: 50px;
    border: 1px solid #000;
    justify-content: center;
    align-items: center;
    text-transform: uppercase;
    padding: 10px 7px;

    border-radius: 8px;
    color: black;
    text-align: center;
    text-decoration: none;
    letter-spacing: 1px;
    transition: all 0.3s ease-out;
}

.pagination_logout:hover, .pagination_logout:focus {
    outline: none;
    border-bottom: 2px solid #eee;
}

.pagination_logout::before, .pagination_logout:after {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 70px;
    height: 70px;
    border: 12px double rgba(0, 0, 0, 0.1);
    border-radius: 50%;
    content: '';
    opacity: 0;
    -webkit-transform: translateX(-50%) translateY(-50%) scale(0.2);
    -moz-transform: translateX(-50%) translateY(-50%) scale(0.2);
    transform: translateX(-50%) translateY(-50%) scale(0.2);
}

.pagination_logout:after {
    width: 60px;
    height: 60px;
    border-width: 6px;
    -webkit-transform: translateX(-50%) translateY(-50%) scale(0.8);
    -moz-transform: translateX(-50%) translateY(-50%) scale(0.8);
    transform: translateX(-50%) translateY(-50%) scale(0.8);
}

.pagination_logout:hover:before, .pagination_logout:hover:after {
    -webkit-animation: pulsate 1.2s infinite;
    -moz-animation: pulsate 1.2s infinite;
    -ms-animation: pulsate 1.2s infinite;
    animation: pulsate 1.2s infinite;
}


_____________________________USERCONTROLLER_______________
 @PostMapping("/registration")
    public ResponseEntity<UserDto> save(@Valid @RequestBody UserPostDto userPostDto) {
        userPostDto.getRole().add(UsersRole.ROLE_USER);
        User user=UserMapstructMapper.USER_MAPSTRUCT_MAPPER.toUser(userPostDto);
        user.setAddress(addressService.save(addressService.getAddress(user.getAddress())));
        return ResponseEntity.status(HttpStatus.CREATED).body(
                UserMapstructMapper.USER_MAPSTRUCT_MAPPER.mapToUserDto(userService.save(userService.savePassword(user)));
        /*
        return ResponseEntity.status(HttpStatus.CREATED).body(
                UserMapstructMapper.USER_MAPSTRUCT_MAPPER.mapToUserDto(
                        userService.save(UserMapstructMapper.USER_MAPSTRUCT_MAPPER.toUser(userPostDto))));
         */
    }

----------------------------------ADDRES.JS-------------------------
/*
function sendNewAddress(jsonText, url) {
    $.ajax({
        type: "POST",
        contentType: 'application/json; charset=utf-8',
        url: url,
        data: jsonText, // Note it is important
        success: function (result) {
            // do what ever you want with data
        }
    });
}

 */


 _____________________________SUPPLIER PATCH____________________________
  default Supplier patch(Supplier supplier, SupplierDto supplierDto) {
         if(supplierDto==null){
             return supplier;
         }
         if(supplierDto.getName()!=null){
             supplier.setName(supplierDto.getName());
         }
         if(supplierDto.getMail()!=null){
             supplier.setMail(supplierDto.getMail());
         }
         if(supplierDto.getAddressId()!=null){
             Address address=new Address();
             address.setId(supplierDto.getAddressId());
             supplier.setAddress(address);
         }
         return supplier;
     }
 _____________________________PRODUCT PATCH______________________________

    default Product patch(Product product, ProductDto dto) {
        if (dto == null) {
            return product;
        }
        if (dto.getCount() != null) {
            product.setCount(dto.getCount());
        }
        if (dto.getInfo() != null) {
            product.setInfo(dto.getInfo());
        }
        if (dto.getPrice() != null) {
            product.setPrice(dto.getPrice());
        }
        if (dto.getType() != null) {
            product.setType(dto.getType());
        }
        if (dto.getName() != null) {
            product.setName(dto.getName());
        }
        if (dto.getSupplierId() != null) {
            Supplier supplier = new Supplier();
            supplier.setId(dto.getSupplierId());
            product.setSupplier(supplier);
        }
        return product;
    }
